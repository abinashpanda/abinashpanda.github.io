<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mining | My Octopress Blog]]></title>
  <link href="http://abinashpanda.github.io/blog/categories/mining/atom.xml" rel="self"/>
  <link href="http://abinashpanda.github.io/"/>
  <updated>2013-10-19T00:03:21+05:30</updated>
  <id>http://abinashpanda.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parsing Data from IMDb]]></title>
    <link href="http://abinashpanda.github.io/blog/2013/10/18/parsing-data-from-imdb/"/>
    <updated>2013-10-18T23:44:00+05:30</updated>
    <id>http://abinashpanda.github.io/blog/2013/10/18/parsing-data-from-imdb</id>
    <content type="html"><![CDATA[<p><a href="http://www.imdb.com">IMDb</a> is an online database of information related to films, television programs and video games. I woulb be going to parse <a href="http://www.imdb.com/chart/top">IMDb Top 250</a> and <a href="http://www.imdb.com/year">IMDb: Years</a> and extract information about the movies ratings, year of release, start casts, directors, etc.</p>

<p>```python main.py</p>

<h1>!/usr/bin/env python</h1>

<p>from lxml.html import parse</p>

<p>tree = parse(&lsquo;<a href="http://www.imdb.com/chart/top">http://www.imdb.com/chart/top</a>&rsquo;)</p>

<p>movies_data = tree.findall(&lsquo;//<em>[@id=&ldquo;main&rdquo;]/table[2]/tr/td[3]/font/a&rsquo;)
movies_rating = tree.findall(&lsquo;//</em>[@id=&ldquo;main&rdquo;]/table[2]/tr/td[2]/font&rsquo;)</p>

<h1>Removing unwanted data</h1>

<p>movies_data.pop(0)
movies_rating.pop(0)</p>

<p>movies_rating = [float(movie.text) for movie in movies_rating]</p>

<p>def get_movie_data(iterator):</p>

<pre><code>movie_data = (iterator.next(), iterator.next())
return movie_data
</code></pre>

<p>mov_dict = {get_movie_data(movies_data[i].itertext())[0]:</p>

<pre><code>        [int(get_movie_data(movies_data[i].itertext())[1].strip(' ()/I')),
         movies_rating[i]] for i in range(len(movies_data))}
</code></pre>

<p>```</p>

<p>Going through the code in details. For this simple parser I have used <strong>parse</strong> from <strong>lxml.html</strong>.</p>

<p><code>tree = parse(&lsquo;<a href="http://www.imdb.com/chart/top">http://www.imdb.com/chart/top</a>&rsquo;)</code> parses the <a href="http://www.imdb.com/chart/top">url</a> and returns a tree.<br/>
Before going on the next line, lets discuss about <strong>XPath</strong>. XPath, the XML Path Language, is a query language for selecting nodes from an XML document. <a href="http://www.w3schools.com/xpath/">XPath Tutorial</a> is a very good tutorial for XPath by w3cschools.com. In the code,
<code>&lsquo;//*[@id=&ldquo;main&rdquo;]/table[2]/tr/td[3]/font/a&rsquo;</code></p>

<pre><code>// : Selects nodes in the document from the current node that match the selection no matter where they are.  
/ : Selects from the root node  
/tr/td[3]: Selects the third td element that is the child of the tr element.   
</code></pre>

<p>To get the XPath of an element, you can use Google Chrome.
Click on <strong>Inspect Element</strong>.
<img src="http://abinashpanda.github.io/assets/images/screen1.jpg" alt="ScreenShot" />
Then select <strong>Copy XPath</strong>.
This would give you the XPath to be used. <strong>Remember to remove &lt;tbody&gt; element from the XPath. and also remove [] from tr as you want to scrape the whole movies list.</strong><br/>
Similarly you can find the XPath for movies_rating also.</p>

<p>Then in
```python get_movie_data
def get_movie_data(iterator):</p>

<pre><code>""" Returns movie_name, year_of_release as movies_data[element].itertext()
would return an iterator containing these two elements"""
movie_data = (iterator.next(), iterator.next())
return movie_data
</code></pre>

<p>mov_dict = {get_movie_data(movies_data[i].itertext())[0]:</p>

<pre><code>        [int(get_movie_data(movies_data[i].itertext())[1].strip(' ()/I')),
         movies_rating[i]] for i in range(len(movies_data))}
</code></pre>

<p>```
<strong>mov_dict</strong> is built containing the dictionary with</p>

<pre><code>key: movie_name
value: year_of_release, moving_rating
</code></pre>
]]></content>
  </entry>
  
</feed>
